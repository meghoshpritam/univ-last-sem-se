# -*- coding: utf-8 -*-
"""Halsted.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_X_I-EcNdLPJ_KX-R12yLLM2wN3ilNRo
"""

import math
import numpy as np
import collections

list_of_keywords_operators=["int","float","str","list","tuple","set","dict","print","len","range","False","await","else","import","pass","None","break","except","in","raise","True","class","finally","is","return","and","continue","for","lambda","try","as","def","from","nonlocal","while","assert","del","global","is","in","not","with","async","elif","if","or","yield","+","-","*","/","%","**","//","=",",",":",">","<","(",")","[","]","&","|","\""]

f_path = input("Enter the file path:")
f = open(f_path,"r")

tokenized=[]
for line in f.readlines():
  tokenized.append(line.split())

unq_operator = []
unq_operand = []
for i in range(len(tokenized)):
  for j in range(len(tokenized[i])):
    if tokenized[i][j] in list_of_keywords_operators:
      unq_operator.append(tokenized[i][j])
    else:
      unq_operand.append(tokenized[i][j])
      
deleted_index=[]
opening_braces_indices=[i for i,x in enumerate(unq_operator) if x=="("]
closing_braces_indices=[i for i,x in enumerate(unq_operator) if x==")"]
for i in range(len(opening_braces_indices)):
  unq_operator[opening_braces_indices[i]]+=unq_operator[closing_braces_indices[i]]
unq_operator=np.delete(unq_operator,closing_braces_indices,0).tolist()

deleted_index=[]
opening_braces_indices=[i for i,x in enumerate(unq_operator) if x=="["]
closing_braces_indices=[i for i,x in enumerate(unq_operator) if x=="]"]
for i in range(len(opening_braces_indices)):
  unq_operator[opening_braces_indices[i]]+=unq_operator[closing_braces_indices[i]]
unq_operator=np.delete(unq_operator,closing_braces_indices,0).tolist()
  
unique_operators=collections.Counter(unq_operator)
unique_operators=dict(unique_operators)
  
unique_operands=collections.Counter(unq_operand)
unique_operands=dict(unique_operands)

distinct_operator=len(dict(unique_operators))
distinct_operand=len(dict(unique_operands))

total_operator = sum(unique_operators.values())
total_operands = sum(unique_operands.values())

length_of_prog = total_operator + total_operands
vocabulary_of_prog = distinct_operator + distinct_operand
esteemated_length = distinct_operator * math.log(distinct_operator,2) + distinct_operand * math.log(distinct_operand,2)
purity_ratio = esteemated_length/length_of_prog
volume = length_of_prog * math.log(vocabulary_of_prog,2)
difficulity = (distinct_operator/2)*(total_operands/distinct_operand)
effort = difficulity * volume

print("\n\nength of program :",length_of_prog,"\nVocabulary of program :",vocabulary_of_prog,
"\nEsteemated length :",esteemated_length,"\nPurity Ratio :",purity_ratio,
"\nVolume :",volume,"\nDifficulity :",difficulity,"\nEffort :",effort)